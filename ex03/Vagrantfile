# Configure Vagrant to be usable with Docker
VAGRANTFILE_API_VERSION = "2"
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'docker'
ENV['FORWARD_DOCKER_PORTS'] = '1'
ENV['VAGRANT_EXPERIMENTAL'] = 'typed_triggers'
unless Vagrant.has_plugin?("vagrant-docker-compose")
    system("vagrant plugin install vagrant-docker-compose")
    puts "Dependencies installed, please try the command again."
    exit
  end

# Docker images
ZOONODE_IMAGE = 'ex03/zoonode:1.0'
CLIENT_IMAGE = 'ex03/client:1.0'
ZOONAVIGATOR_IMAGE = 'elkozmon/zoonavigator:latest'

# Localhost config
SUBNET = '10.0.1.'

# Node definitions
NODE = {
    :nameprefix => 'NODE-',
    :subnet => SUBNET,
    :ip_offset => 66,
    :image => CLIENT_IMAGE,
}

# Configurable parameters
# --------------------------------------------------------------------
TREE_DEPTH = 3  # Binary tree depth
N_NODES = 2 ** TREE_DEPTH - 1 # Number of nodes in the tree
API_PORT = 5000 # Port where the API is exposed
ROOT_NODE_ID = 1 # ID of the root node - this is always indexed from 1
ROOT_NODE = "#{NODE[:nameprefix]}#{ROOT_NODE_ID}"
STARTUP_DELAY_SECS = 3
# --------------------------------------------------------------------

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.ssh.insert_key = false

    # Build docker images
    config.trigger.before :up, type: :command do |trigger|
        trigger.name = 'Build docker images and configuration files'
        trigger.ruby do |env, machine|
            puts 'Building docker images...'

            # Build node image
            `docker build zoonode -t #{ZOONODE_IMAGE}`

            # Build client image
            `docker build client -t #{CLIENT_IMAGE}`

            puts 'Building docker images... Done'
        end
    end

    ZOOKEEPER_IP_ADDRESS = "#{SUBNET}#{NODE[:ip_offset] - 1}"
    puts "Zookeeper IP address: #{ZOOKEEPER_IP_ADDRESS}"

    # Dockerize zookeeper
    config.vm.define 'zoonode' do |s|
        s.vm.network 'private_network', ip: ZOOKEEPER_IP_ADDRESS
        s.vm.hostname = 'zoonode'
        s.vm.provider 'docker' do |d|
            d.image = ZOONODE_IMAGE
            d.has_ssh = true
            d.name = 'Zoonode'
        end
        s.vm.post_up_message = 'Zoonode is up and running. Access it via: vagrant ssh zoonode'
    end

    # Dockerize clients
    
    (1..N_NODES).each do |i|
        # Configure ip address and name
        node_ip_address = "#{SUBNET}#{NODE[:ip_offset] + i}"
        node_name = "#{NODE[:nameprefix]}#{i}"

        config.vm.define node_name do |s|
            s.vm.network 'private_network', ip: node_ip_address
            s.vm.hostname = node_name
            s.vm.network 'forwarded_port', guest: 80, host: API_PORT, host_ip: '0.0.0.0', auto_correct: true
            s.vm.provider 'docker' do |d|
                d.image = CLIENT_IMAGE
                d.has_ssh = true
                d.name = node_name
                d.env = {
                    'node_name' => node_name,
                    'zookeeper' => ZOOKEEPER_IP_ADDRESS,
                    'root_node' => ROOT_NODE,
                    'n_nodes' => N_NODES,
                    'api_port' => API_PORT,
                    'startup_delay' => ROOT_NODE == node_name ? 0 : STARTUP_DELAY_SECS,  # seconds
                    'debug' => 'true'
                }
            end
            s.vm.post_up_message = "#{node_name} is up and running. Access it via: vagrant ssh #{node_name}"
        end
    end
end

